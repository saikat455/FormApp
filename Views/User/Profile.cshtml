@{
    ViewData["Title"] = "Profile";
}

<div class="container mt-4">
    <h2>My Profile</h2>

    <!-- Tab navigation for Templates and Forms -->
    <ul class="nav nav-tabs" id="profileTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="templates-tab" data-bs-toggle="tab" data-bs-target="#templates" type="button" role="tab">
                My Templates
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="forms-tab" data-bs-toggle="tab" data-bs-target="#forms" type="button" role="tab">
                Submitted Forms
            </button>
        </li>
    </ul>

    <div class="tab-content" id="profileTabsContent">
        <div class="tab-pane fade show active" id="templates" role="tabpanel">
            <div class="d-flex justify-content-end my-3">
                <button class="btn btn-primary" onclick="showCreateTemplateModal()">
                    <i class="bi bi-plus-circle"></i> Create
                </button>
            </div>


            <div id="templateContainer" class="d-flex flex-wrap"></div>


        </div>

        <div class="tab-pane fade" id="forms" role="tabpanel">
            <div id="formTable"></div>
        </div>
    </div>
</div>

<!-- Create/Edit Template Modal -->
<div class="modal fade" id="templateModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title" id="templateModalTitle">Create Template</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="templateForm">
                    <input type="hidden" id="templateId">
                    <!-- Template Details Section -->
                    <div class="mb-4">
                        <h5 class="mb-3">Template Details</h5>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Title <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="title" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Topic <span class="text-danger">*</span></label>
                                <select class="form-control" id="topic" required>
                                    <option value="Education">Education</option>
                                    <option value="Quiz">Quiz</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="col-12">
                                <label class="form-label">Description <span class="text-danger">*</span></label>
                                <textarea class="form-control" id="description" rows="3" required></textarea>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Template Image</label>
                                <div class="d-flex gap-2 align-items-center">
                                    <input type="file" class="form-control" id="imageFile" accept="image/*">
                                    <img id="imagePreview" src="" alt="" style="max-height: 40px; display: none;">
                                </div>
                                <input type="hidden" id="imageUrl">
                            </div>

                            <div class="col-md-6">
                                <div class="form-check mt-4 pt-2">
                                    <input class="form-check-input" type="checkbox" id="isPublic">
                                    <label class="form-check-label">Public Template</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Add Question Section -->
                    <div class="mb-4">
                        <h5 class="mb-3">Questions</h5>
                        <div id="questionsList" class="mb-3"></div>
                        <div class="d-flex align-items-center text-muted " onclick="addQuestion()" style="gap: 10px; cursor: pointer;">
                            <div class="p-3 d-flex align-items-center justify-content-center" style="width: 35px; height: 35px; background-color: #f0f0f0; border-radius: 8px;">
                                <i class="bi bi-plus" style="font-size: 1.5rem; color: #6c757d;"></i>
                            </div>
                            <span class="fw-medium" style="color: #6c757d;">Add Question</span>
                        </div>
                    </div>

                </form>
            </div>
            <div class="modal-footer bg-light">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveTemplate()">Save Template</button>
            </div>
        </div>
    </div>
</div>

<!-- View Template Questions Modal -->
<div class="modal fade" id="viewQuestionsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewQuestionsModalTitle">Template Questions</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="viewQuestionsContainer">
                <!-- Questions will be dynamically loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            loadTemplates();
            $("<style>")
            .text(`
                .like-button:hover .like-icon {
                    color: #dc3545 !important;
                }
                .like-button {
                    transition: all 0.2s ease;
                }
                .like-button:active {
                    transform: scale(0.95);
                }
            `)
        .appendTo("head");
        });

        async function uploadImage(file) {
            const formData = new FormData();
            formData.append('file', file);

            try {
                const response = await fetch('/User/UploadImage', {
                    method: 'POST',
                    body: formData
                });
                const data = await response.json();
                return data.imageUrl;
            } catch (error) {
                console.error('Error uploading image:', error);
                toastr.error('Failed to upload image');
                return null;
            }
        }

        // Add event listener for image file input
        $('#imageFile').change(async function(e) {
            const file = e.target.files[0];
            if (file) {
                // Show preview
                const reader = new FileReader();
                reader.onload = function(e) {
                    $('#imagePreview').attr('src', e.target.result).show();
                };
                reader.readAsDataURL(file);

                // Upload to Cloudinary
                const imageUrl = await uploadImage(file);
                if (imageUrl) {
                    $('#imageUrl').val(imageUrl);
                }
            }
        });

        function loadTemplates() {
            $.ajax({
                url: "/User/GetTemplates",
                type: "GET",
                success: function(response) {
                        let container = $("#templateContainer");
                        container.empty();

                        if (!response || response.length === 0) {
                            toastr.info("No templates found.");
                            return;
                        }

                        response.forEach(template => {
                            let card = `
                                <div class="card shadow-sm m-2" style="width: 18rem;">
                                    <div class="position-relative">
                                        <img src="${template.imageUrl || 'placeholder.jpg'}" class="card-img-top" style="height: 150px; object-fit: cover;">
                                        <div class="position-absolute top-0 end-0 p-2 d-flex align-items-center">
                                            <button class="btn btn-light btn-sm me-2 like-button" data-template-id="${template.id}">
                                                <i class="bi bi-heart-fill like-icon"></i>
                                                <span class="like-count">${template.likes ? template.likes.length : 0}</span>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <h5 class="card-title">${template.title}</h5>
                                        <p class="card-text">${template.description}</p>
                                        <p class="text-muted"><strong>Topic:</strong> ${template.topic}</p>
                                        <p class="text-muted"><strong>Public:</strong> ${template.isPublic ? 'Yes' : 'No'}</p>
                                        <div class="d-flex gap-2">
                                            <button class="btn btn-info btn-sm" onclick="viewTemplateQuestions(${template.id})">
                                                View question
                                            </button>
                                            ${template.canEdit ? `
                                                <button class="btn btn-warning btn-sm" onclick="editTemplate(${template.id})">
                                                    <i class="bi bi-pen"></i>
                                                </button>
                                                <button class="btn btn-danger btn-sm" onclick="deleteTemplate(${template.id})">
                                                    <i class="bi bi-trash3"></i>
                                                </button>
                                            ` : ''}
                                        </div>
                                    </div>
                                </div>
                            `;
                            container.append(card);
                            initializeLikeButton(template.id);
                        });
                    },
                error: function() {
                   toastr.error('An error occurred while loading templates.');
                }
            });


            formTable = new Tabulator("#formTable", {
                ajaxURL: "/Admin/GetFormAnswers",
                ajaxResponse: function(url, params, response) {
                    console.log("Tabulator received data:", response);
                    return response;  // return the data to be displayed in the table
                },
                layout: "fitColumns",
                columns: [
                    { title: "Template Title", field: "templateTitle", headerFilter: "input", sorter: "string" },
                    { title: "User", field: "username", headerFilter: "input", sorter: "string" },
                    { title: "Question Title", field: "questionTitle", headerFilter: "input", sorter: "string" },
                    { title: "Answer", field: "answer", headerFilter: "input", sorter: "string" }
                ]
            });
        }

        function initializeLikeButton(templateId) {
            // Get initial like status
            $.get(`/User/GetTemplateLikeStatus?templateId=${templateId}`, function(response) {
                if (response.success) {
                    const button = $(`.like-button[data-template-id="${templateId}"]`);
                    const icon = button.find('.like-icon');
                    const count = button.find('.like-count');

                    count.text(response.likeCount);
                    if (response.isLiked) {
                        icon.addClass('text-danger');
                    }
                }
            });

            // Add click handler
            $(`.like-button[data-template-id="${templateId}"]`).click(function() {
                const button = $(this);
                const icon = button.find('.like-icon');
                const count = button.find('.like-count');

                $.ajax({
                    url: '/User/ToggleLike',
                    type: 'POST',
                    data: { templateId: templateId },
                    success: function(response) {
                        if (response.success) {
                            if (response.isLiked) {
                                icon.addClass('text-danger');
                            } else {
                                icon.removeClass('text-danger');
                            }
                            count.text(response.likeCount);
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function() {
                        toastr.error('Error toggling like');
                    }
                });
            });
        }


        function showCreateTemplateModal() {
            $('#templateId').val('');
            $('#templateForm')[0].reset();
            $('#questionsList').empty();
            $('#templateModalTitle').text('Create Template');
            $('#templateModal').modal('show');
        }

        function addQuestion() {
            const questionHtml = `
                <div class="question-item card mb-3 border-grey">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="card-title mb-0" style="color: #495057;">New Question</h6>
                            <button type="button" class="btn btn-sm btn-link text-danger" onclick="this.closest('.question-item').remove()">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label" style="color: #6c757d;">Question Title <span class="text-danger">*</span></label>
                                <input type="text" class="form-control question-title" required style="border-color: #dee2e6;">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label" style="color: #6c757d;">Type <span class="text-danger">*</span></label>
                                <select class="form-control question-type" required style="border-color: #dee2e6;" onchange="handleQuestionTypeChange(this)">
                                    <option value="SingleLine">Single Line Text</option>
                                    <option value="MultiLine">Multi Line Text</option>
                                    <option value="Integer">Integer</option>
                                    <option value="Radio">Radio</option>
                                    <option value="MultipleChoice">Multiple Choice</option>
                                </select>
                            </div>
                            <div class="col-12">
                                <label class="form-label" style="color: #6c757d;">Description</label>
                                <input type="text" class="form-control question-description" style="border-color: #dee2e6;">
                            </div>
                            <div class="col-12">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input question-show-table" style="border-color: #dee2e6;">
                                    <label class="form-check-label" style="color: #6c757d;">Show in Table</label>
                                </div>
                            </div>
                            <!-- Multiple Choice Options Section -->
                            <div class="col-12 multiple-choice-options" style="display: none;">
                                <label class="form-label" style="color: #6c757d;">Options</label>
                                <div class="options-list mb-2"></div>
                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="addOption(this)">
                                    <i class="bi bi-plus"></i> Add Option
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            $('#questionsList').append(questionHtml);
        }

        function handleQuestionTypeChange(selectElement) {
            const questionItem = $(selectElement).closest('.question-item');
            const optionsSection = questionItem.find('.multiple-choice-options');

            if (selectElement.value === 'MultipleChoice') {
                optionsSection.show();
            } else {
                optionsSection.hide();
            }
        }

        function addOption(button) {
            const optionsList = $(button).siblings('.options-list');
            const optionHtml = `
                <div class="input-group mb-2">
                    <input type="text" class="form-control option-input" placeholder="Enter option">
                    <button type="button" class="btn btn-outline-danger" onclick="this.parentElement.remove()">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            `;
            optionsList.append(optionHtml);
        }

        function saveTemplate() {
            const requiredFields = [
                { selector: '#title', message: 'Title is required' },
                { selector: '#topic', message: 'Topic is required' },
                { selector: '#description', message: 'Description is required' }
            ];

            let isValid = true;
            requiredFields.forEach(field => {
                const value = $(field.selector).val().trim();
                if (!value) {
                    toastr.error(field.message);
                    isValid = false;
                }
            });

            const questions = [];
            $('.question-item').each(function() {
                const questionTitle = $(this).find('.question-title').val().trim();
                const questionType = $(this).find('.question-type').val().trim();

                if (!questionTitle) {
                    toastr.error('Question title is required for all questions');
                    isValid = false;
                }

                if (!questionType) {
                    toastr.error('Question type is required for all questions');
                    isValid = false;
                }

                const question = {
                    title: questionTitle,
                    description: $(this).find('.question-description').val().trim(),
                    type: questionType,
                    showInTable: $(this).find('.question-show-table').is(':checked')
                };

                if (questionType === 'MultipleChoice') {
                    const options = [];
                    $(this).find('.option-input').each(function() {
                        const optionValue = $(this).val().trim();
                        if (optionValue) {
                            options.push(optionValue);
                        }
                    });
                    question.options = options;
                }

                questions.push(question);
            });

            if (!isValid) {
                return;
            }

            const templateData = {
                id: $('#templateId').val() || 0,
                title: $('#title').val().trim(),
                description: $('#description').val().trim(),
                topic: $('#topic').val().trim(),
                imageUrl: $('#imageUrl').val().trim(),
                isPublic: $('#isPublic').is(':checked'),
                questions: questions
            };

            $.ajax({
                url: '/User/SaveTemplate',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(templateData),
                success: function(response) {
                    if (response.success) {
                        $('#templateModal').modal('hide');
                        loadTemplates();
                        toastr.success(response.message);
                    } else {
                        toastr.error(response.message);
                    }
                },
                error: function() {
                    toastr.error('An error occurred while saving the template');
                }
            });
        }

        function editTemplate(id) {
            $.get(`/User/GetTemplate/${id}`, function(template) {
                if (template.success === false) {
                    toastr.error(template.message);
                    return;
                }

                $('#templateId').val(template.id);
                $('#title').val(template.title);
                $('#description').val(template.description);
                $('#topic').val(template.topic);
                // $('#imageUrl').val(template.imageUrl);
                if (template.imageUrl) {
                    $('#imageUrl').val(template.imageUrl);
                    $('#imagePreview').attr('src', template.imageUrl).show();
                } else {
                    $('#imagePreview').hide();
                }
                $('#isPublic').prop('checked', template.isPublic);

                $('#questionsList').empty();
                template.questions.forEach(function(question) {
                    const questionHtml = `
                        <div class="question-item border p-3 mb-2 position-relative">
                            <button type="button" class="btn position-absolute top-0 end-0 m-2" onclick="this.parentElement.remove()">
                                <i class="bi bi-trash3"></i>
                            </button>
                            <div class="mb-2">
                                <label class="form-label">Question Title</label>
                                <input type="text" class="form-control question-title" value="${question.title}" required>
                            </div>
                            <div class="mb-2">
                                <label class="form-label">Description</label>
                                <input type="text" class="form-control question-description" value="${question.description}">
                            </div>
                            <div class="mb-2">
                                <label class="form-label">Type</label>
                                <select class="form-control question-type" required>
                                    <option value="SingleLine" ${question.type === 'SingleLine' ? 'selected' : ''}>Single Line Text</option>
                                    <option value="MultiLine" ${question.type === 'MultiLine' ? 'selected' : ''}>Multi Line Text</option>
                                    <option value="Integer" ${question.type === 'Integer' ? 'selected' : ''}>Integer</option>
                                    <option value="Radio" ${question.type === 'Radio' ? 'selected' : ''}>Radio</option>
                                </select>
                            </div>
                            <div class="form-check mb-2">
                                <input type="checkbox" class="form-check-input question-show-table" ${question.showInTable ? 'checked' : ''}>
                                <label class="form-check-label">Show in Table</label>
                            </div>
                        </div>
                    `;
                    $('#questionsList').append(questionHtml);
                });

                $('#templateModalTitle').text('Edit Template');
                $('#templateModal').modal('show');
            }).fail(function() {
                toastr.error('An error occurred while loading the template.');
            });
        }

        function viewTemplateQuestions(id) {
            window.location.href = `/User/ViewTemplateQuestions/${id}`;
        }

        function deleteTemplate(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'You won\'t be able to revert this!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'No, keep it'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/User/DeleteTemplate/${id}`,
                        type: 'POST',
                        success: function(response) {
                            loadTemplates();
                            Swal.fire('Deleted!', response.message, 'success');
                        },
                        error: function() {
                            Swal.fire('Error!', 'An error occurred while deleting the template', 'error');
                        }
                    });
                }
            });
        }
    </script>
}
